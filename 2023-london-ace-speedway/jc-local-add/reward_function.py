from numpy import array
import math

def distance_to_tangent(points):
    """Calculates the distance of (x, y) to the tangent of (x1, y1) and (x2, y2)."""
    x, y = points[0]
    x1, y1 = points[1]
    x2, y2 = points[2]
    slope = (y2 - y1) / (x2 - x1)
    y_intercept = y1 - slope * x1
    tangent_y = slope * x + y_intercept
    return math.sqrt((x - x1)**2 + (tangent_y - y)**2)

def calculate_reward_using_signmoid(x):
    """Returns the sigmoid value of x."""
    return ((1 - 1 / (1 + math.exp(-x))) * 2) ** 4

class Reward:
    def __init__(self, verbose=False):
        self.verbose = verbose
        self.past_params = []

    def reward_function(self, params):
        track_line = array([[-3.67571035e-01, -3.75680483e+00],
       [-2.53615499e-01, -3.81936789e+00],
       [-1.39659930e-01, -3.88193088e+00],
       [ 6.00407779e-02, -3.99131716e+00],
       [ 2.95187422e-01, -4.11981796e+00],
       [ 5.46101083e-01, -4.25655733e+00],
       [ 8.06283965e-01, -4.39751359e+00],
       [ 1.07023642e+00, -4.53919536e+00],
       [ 1.33604223e+00, -4.68004188e+00],
       [ 1.60316353e+00, -4.81921830e+00],
       [ 1.87160741e+00, -4.95615045e+00],
       [ 2.14155154e+00, -5.09032618e+00],
       [ 2.41320941e+00, -5.22122744e+00],
       [ 2.68677799e+00, -5.34830363e+00],
       [ 2.96240563e+00, -5.47095086e+00],
       [ 3.24016224e+00, -5.58848618e+00],
       [ 3.52000942e+00, -5.70011708e+00],
       [ 3.80182480e+00, -5.80465407e+00],
       [ 4.08520038e+00, -5.90117757e+00],
       [ 4.36964048e+00, -5.98840739e+00],
       [ 4.65450882e+00, -6.06490883e+00],
       [ 4.93905629e+00, -6.12913169e+00],
       [ 5.22245880e+00, -6.17948499e+00],
       [ 5.50387468e+00, -6.21451733e+00],
       [ 5.78256136e+00, -6.23336378e+00],
       [ 6.05791806e+00, -6.23567541e+00],
       [ 6.32940815e+00, -6.22116751e+00],
       [ 6.59564064e+00, -6.18646571e+00],
       [ 6.85488061e+00, -6.12838334e+00],
       [ 7.10396412e+00, -6.04194108e+00],
       [ 7.34278109e+00, -5.93175043e+00],
       [ 7.57069075e+00, -5.80003986e+00],
       [ 7.78660408e+00, -5.64801804e+00],
       [ 7.98865662e+00, -5.47603239e+00],
       [ 8.17558349e+00, -5.28565984e+00],
       [ 8.34593458e+00, -5.07835309e+00],
       [ 8.49769711e+00, -4.85535289e+00],
       [ 8.62940971e+00, -4.61870233e+00],
       [ 8.73979422e+00, -4.37068183e+00],
       [ 8.82775238e+00, -4.11374120e+00],
       [ 8.89238095e+00, -3.85047426e+00],
       [ 8.93298373e+00, -3.58359081e+00],
       [ 8.94911284e+00, -3.31586491e+00],
       [ 8.94076756e+00, -3.05000309e+00],
       [ 8.90886703e+00, -2.78835249e+00],
       [ 8.85479480e+00, -2.53275893e+00],
       [ 8.77924488e+00, -2.28494296e+00],
       [ 8.68124203e+00, -2.04731335e+00],
       [ 8.55930647e+00, -1.82296065e+00],
       [ 8.41040203e+00, -1.61680025e+00],
       [ 8.23084652e+00, -1.43630782e+00],
       [ 8.02161264e+00, -1.27169534e+00],
       [ 7.79940127e+00, -1.14157287e+00],
       [ 7.56115059e+00, -1.03143262e+00],
       [ 7.31041599e+00, -9.38331942e-01],
       [ 7.05014828e+00, -8.59172631e-01],
       [ 6.78313750e+00, -7.90357426e-01],
       [ 6.51165219e+00, -7.28616568e-01],
       [ 6.23792665e+00, -6.70477789e-01],
       [ 5.95734171e+00, -6.11260958e-01],
       [ 5.67706820e+00, -5.50449503e-01],
       [ 5.39739468e+00, -4.87052967e-01],
       [ 5.11866427e+00, -4.20266573e-01],
       [ 4.84120097e+00, -3.49585178e-01],
       [ 4.56523368e+00, -2.74828489e-01],
       [ 4.29092545e+00, -1.95944260e-01],
       [ 4.01847887e+00, -1.12741417e-01],
       [ 3.74825018e+00, -2.46855055e-02],
       [ 3.48077713e+00,  6.90886898e-02],
       [ 3.21656372e+00,  1.69312667e-01],
       [ 2.95674560e+00,  2.77807706e-01],
       [ 2.70178005e+00,  3.94962927e-01],
       [ 2.45105973e+00,  5.19381462e-01],
       [ 2.20530203e+00,  6.51972296e-01],
       [ 1.96364354e+00,  7.91076600e-01],
       [ 1.72693971e+00,  9.37791969e-01],
       [ 1.49520633e+00,  1.09186427e+00],
       [ 1.26983191e+00,  1.25495443e+00],
       [ 1.05188585e+00,  1.42801740e+00],
       [ 8.41864784e-01,  1.61112312e+00],
       [ 6.42696544e-01,  1.80699583e+00],
       [ 4.54157603e-01,  2.01428019e+00],
       [ 2.73752589e-01,  2.22963203e+00],
       [ 1.00290767e-01,  2.45144209e+00],
       [-6.72556946e-02,  2.67838889e+00],
       [-2.29734584e-01,  2.90937049e+00],
       [-3.87782310e-01,  3.14349411e+00],
       [-5.42088767e-01,  3.37991490e+00],
       [-6.93209450e-01,  3.61799979e+00],
       [-8.41751461e-01,  3.85722287e+00],
       [-9.88334859e-01,  4.09718033e+00],
       [-1.13343589e+00,  4.33760845e+00],
       [-1.27299872e+00,  4.57080352e+00],
       [-1.41532496e+00,  4.80118039e+00],
       [-1.56351861e+00,  5.02555131e+00],
       [-1.72057207e+00,  5.24075097e+00],
       [-1.88965050e+00,  5.44318975e+00],
       [-2.07413728e+00,  5.62853504e+00],
       [-2.27515222e+00,  5.79430140e+00],
       [-2.49258695e+00,  5.93887995e+00],
       [-2.68457953e+00,  6.17976004e+00],
       [-2.92740519e+00,  6.30557281e+00],
       [-3.18131811e+00,  6.41438587e+00],
       [-3.44485082e+00,  6.50619522e+00],
       [-3.71643455e+00,  6.58105767e+00],
       [-3.99445835e+00,  6.63905331e+00],
       [-4.27731552e+00,  6.68026131e+00],
       [-4.56343580e+00,  6.70474913e+00],
       [-4.85130340e+00,  6.71257225e+00],
       [-5.13946223e+00,  6.70377986e+00],
       [-5.42651109e+00,  6.67842159e+00],
       [-5.71109197e+00,  6.63655168e+00],
       [-5.99187458e+00,  6.57822924e+00],
       [-6.26753977e+00,  6.50351575e+00],
       [-6.53676385e+00,  6.41247284e+00],
       [-6.79820517e+00,  6.30516473e+00],
       [-7.05049400e+00,  6.18166906e+00],
       [-7.29222721e+00,  6.04209869e+00],
       [-7.52196890e+00,  5.88663464e+00],
       [-7.73825856e+00,  5.71556799e+00],
       [-7.93962767e+00,  5.52934592e+00],
       [-8.12462443e+00,  5.32861628e+00],
       [-8.29184524e+00,  5.11426386e+00],
       [-8.43997000e+00,  4.88743269e+00],
       [-8.56779768e+00,  4.64952960e+00],
       [-8.67427980e+00,  4.40220636e+00],
       [-8.75855369e+00,  4.14731891e+00],
       [-8.81999530e+00,  3.88686221e+00],
       [-8.85836324e+00,  3.62287282e+00],
       [-8.87485494e+00,  3.35727995e+00],
       [-8.87040315e+00,  3.09162420e+00],
       [-8.84547210e+00,  2.82726170e+00],
       [-8.79962399e+00,  2.56554636e+00],
       [-8.73135477e+00,  2.30810997e+00],
       [-8.63845712e+00,  2.05701310e+00],
       [-8.51548435e+00,  1.81594083e+00],
       [-8.37107673e+00,  1.58335414e+00],
       [-8.20849510e+00,  1.35867881e+00],
       [-8.03025048e+00,  1.14140923e+00],
       [-7.83857692e+00,  9.31047237e-01],
       [-7.63556642e+00,  7.27060017e-01],
       [-7.42272466e+00,  5.29155287e-01],
       [-7.20144284e+00,  3.37043959e-01],
       [-6.97277641e+00,  1.50606163e-01],
       [-6.73808230e+00, -3.06410449e-02],
       [-6.49829975e+00, -2.07013884e-01],
       [-6.25422585e+00, -3.78850297e-01],
       [-6.00652967e+00, -5.46510171e-01],
       [-5.75577567e+00, -7.10378645e-01],
       [-5.50236975e+00, -8.70761040e-01],
       [-5.24672886e+00, -1.02807268e+00],
       [-4.98922263e+00, -1.18274413e+00],
       [-4.73017213e+00, -1.33519122e+00],
       [-4.46985852e+00, -1.48580256e+00],
       [-4.20852782e+00, -1.63492959e+00],
       [-3.94638525e+00, -1.78286841e+00],
       [-3.68362427e+00, -1.92989760e+00],
       [-3.42045482e+00, -2.07631970e+00],
       [-3.15709386e+00, -2.22245309e+00],
       [-2.89352554e+00, -2.36826686e+00],
       [-2.62982733e+00, -2.51387211e+00],
       [-2.36600094e+00, -2.65926072e+00],
       [-2.10205646e+00, -2.80443972e+00],
       [-1.83803701e+00, -2.94948411e+00],
       [-1.57396901e+00, -3.09446812e+00],
       [-1.30989802e+00, -3.23945189e+00],
       [-1.04582703e+00, -3.38443303e+00],
       [-7.81755507e-01, -3.52941203e+00],
       [-5.17685473e-01, -3.67439008e+00],
       [-3.67571035e-01, -3.75680483e+00]])    

        # Max speed. Although the max speed is lower in corner, it will just give more bias to the racing line and progress
        MAX_SPEED = 4

        # Read input parameters
        speed = params['speed']
        closest_waypoints = params['closest_waypoints']
        progress = params['progress']
        steps = params['steps']
        x = params['x']
        y = params['y']
        steering_angle = params['steering_angle']

        smooth_reward = 1
        print("Steps : " + format(steps, "0.3f"))
        if steps == 1:
            self.past_params = []
            print("smooth_reward : " + format(smooth_reward, "0.1f"))
        else:
            last_idx = len(self.past_params) - 1
            if last_idx >= 0:
                prev_steering_angle = self.past_params[last_idx]['steering_angle']
                prev_speed = self.past_params[last_idx]['speed']
                if prev_steering_angle == steering_angle and prev_speed == speed:
                    smooth_reward = 1.2

                print("smooth_reward {}, previous {},{}, current {},{}".format(smooth_reward, prev_steering_angle, prev_speed, steering_angle, speed))

        # adding past params for calculating rewards
        self.past_params.append(params)

        # Calculate the deviation from raceline    
        next_point = track_line[closest_waypoints[1]]
        prev_point = track_line[closest_waypoints[0]]
        distance = distance_to_tangent([[x,y], next_point, prev_point])
        raceline_reward = calculate_reward_using_signmoid(distance)
        
        speed_reward = speed / MAX_SPEED

        if steps > 1:
          progress_reward = (progress / steps) ** 2
        else:
          progress_reward = 1
      
        if closest_waypoints[0] > 135 or closest_waypoints[1] < 12:
            if speed < 3:
                speed_reward *= 0.01
        if closest_waypoints[0] in range(21, 23) \
                or closest_waypoints[0] in range(44, 56) \
                or closest_waypoints[0] in range(130, 134):
            if speed > 2.8:
                speed_reward *= 0.01
        total_reward = speed_reward + raceline_reward + progress_reward

        print("distance = " + format(distance, "0.3f"))
        print("raceline rewards = " + format(raceline_reward, ".3f"))
        print("speed rewards = " + format(speed_reward, ".3f"))
        print("progress rewards = " + format(progress_reward, ".3f"))
        # print("smooth rewards = " + format(smooth_reward, ".3f"))
        print("total rewards = " + format(total_reward, ".3f"))

        return total_reward
    
reward_object = Reward()  # add parameter verbose=True to get noisy output for testing

def reward_function(params):
    return reward_object.reward_function(params)
